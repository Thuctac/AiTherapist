# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AuthUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, username: str=None, email: str=None, token: str=None, profile_pic: str=None):  # noqa: E501
        """AuthUser - a model defined in Swagger

        :param id: The id of this AuthUser.  # noqa: E501
        :type id: str
        :param username: The username of this AuthUser.  # noqa: E501
        :type username: str
        :param email: The email of this AuthUser.  # noqa: E501
        :type email: str
        :param token: The token of this AuthUser.  # noqa: E501
        :type token: str
        :param profile_pic: The profile_pic of this AuthUser.  # noqa: E501
        :type profile_pic: str
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'email': str,
            'token': str,
            'profile_pic': str
        }

        self.attribute_map = {
            'id': '_id',
            'username': 'username',
            'email': 'email',
            'token': 'token',
            'profile_pic': 'profilePic'
        }
        self._id = id
        self._username = username
        self._email = email
        self._token = token
        self._profile_pic = profile_pic

    @classmethod
    def from_dict(cls, dikt) -> 'AuthUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthUser of this AuthUser.  # noqa: E501
        :rtype: AuthUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AuthUser.


        :return: The id of this AuthUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AuthUser.


        :param id: The id of this AuthUser.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this AuthUser.


        :return: The username of this AuthUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this AuthUser.


        :param username: The username of this AuthUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this AuthUser.


        :return: The email of this AuthUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this AuthUser.


        :param email: The email of this AuthUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def token(self) -> str:
        """Gets the token of this AuthUser.


        :return: The token of this AuthUser.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this AuthUser.


        :param token: The token of this AuthUser.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def profile_pic(self) -> str:
        """Gets the profile_pic of this AuthUser.

        URL of user's profile picture  # noqa: E501

        :return: The profile_pic of this AuthUser.
        :rtype: str
        """
        return self._profile_pic

    @profile_pic.setter
    def profile_pic(self, profile_pic: str):
        """Sets the profile_pic of this AuthUser.

        URL of user's profile picture  # noqa: E501

        :param profile_pic: The profile_pic of this AuthUser.
        :type profile_pic: str
        """

        self._profile_pic = profile_pic
