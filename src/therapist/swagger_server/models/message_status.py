# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MessageStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, message_id: str=None, state: str=None, response_text: str=None, response_audio: bytearray=None):  # noqa: E501
        """MessageStatus - a model defined in Swagger

        :param message_id: The message_id of this MessageStatus.  # noqa: E501
        :type message_id: str
        :param state: The state of this MessageStatus.  # noqa: E501
        :type state: str
        :param response_text: The response_text of this MessageStatus.  # noqa: E501
        :type response_text: str
        :param response_audio: The response_audio of this MessageStatus.  # noqa: E501
        :type response_audio: bytearray
        """
        self.swagger_types = {
            'message_id': str,
            'state': str,
            'response_text': str,
            'response_audio': bytearray
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'state': 'state',
            'response_text': 'responseText',
            'response_audio': 'responseAudio'
        }
        self._message_id = message_id
        self._state = state
        self._response_text = response_text
        self._response_audio = response_audio

    @classmethod
    def from_dict(cls, dikt) -> 'MessageStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MessageStatus of this MessageStatus.  # noqa: E501
        :rtype: MessageStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self) -> str:
        """Gets the message_id of this MessageStatus.

        Identifier of the processed message  # noqa: E501

        :return: The message_id of this MessageStatus.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: str):
        """Sets the message_id of this MessageStatus.

        Identifier of the processed message  # noqa: E501

        :param message_id: The message_id of this MessageStatus.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def state(self) -> str:
        """Gets the state of this MessageStatus.

        Current processing state  # noqa: E501

        :return: The state of this MessageStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this MessageStatus.

        Current processing state  # noqa: E501

        :param state: The state of this MessageStatus.
        :type state: str
        """
        allowed_values = ["processing", "done"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def response_text(self) -> str:
        """Gets the response_text of this MessageStatus.

        AI-generated response text (only when `state` is `done`)  # noqa: E501

        :return: The response_text of this MessageStatus.
        :rtype: str
        """
        return self._response_text

    @response_text.setter
    def response_text(self, response_text: str):
        """Sets the response_text of this MessageStatus.

        AI-generated response text (only when `state` is `done`)  # noqa: E501

        :param response_text: The response_text of this MessageStatus.
        :type response_text: str
        """

        self._response_text = response_text

    @property
    def response_audio(self) -> bytearray:
        """Gets the response_audio of this MessageStatus.

        Base64-encoded AI response audio (only when `state` is `done`)  # noqa: E501

        :return: The response_audio of this MessageStatus.
        :rtype: bytearray
        """
        return self._response_audio

    @response_audio.setter
    def response_audio(self, response_audio: bytearray):
        """Sets the response_audio of this MessageStatus.

        Base64-encoded AI response audio (only when `state` is `done`)  # noqa: E501

        :param response_audio: The response_audio of this MessageStatus.
        :type response_audio: bytearray
        """

        self._response_audio = response_audio
