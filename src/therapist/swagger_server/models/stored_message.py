# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StoredMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, message_id: str=None, user_id: str=None, conversation_id: str=None, timestamp: datetime=None, text: str=None, voice_url: str=None, image_url: str=None, direction: str=None):  # noqa: E501
        """StoredMessage - a model defined in Swagger

        :param message_id: The message_id of this StoredMessage.  # noqa: E501
        :type message_id: str
        :param user_id: The user_id of this StoredMessage.  # noqa: E501
        :type user_id: str
        :param conversation_id: The conversation_id of this StoredMessage.  # noqa: E501
        :type conversation_id: str
        :param timestamp: The timestamp of this StoredMessage.  # noqa: E501
        :type timestamp: datetime
        :param text: The text of this StoredMessage.  # noqa: E501
        :type text: str
        :param voice_url: The voice_url of this StoredMessage.  # noqa: E501
        :type voice_url: str
        :param image_url: The image_url of this StoredMessage.  # noqa: E501
        :type image_url: str
        :param direction: The direction of this StoredMessage.  # noqa: E501
        :type direction: str
        """
        self.swagger_types = {
            'message_id': str,
            'user_id': str,
            'conversation_id': str,
            'timestamp': datetime,
            'text': str,
            'voice_url': str,
            'image_url': str,
            'direction': str
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'user_id': 'userId',
            'conversation_id': 'conversationId',
            'timestamp': 'timestamp',
            'text': 'text',
            'voice_url': 'voiceUrl',
            'image_url': 'imageUrl',
            'direction': 'direction'
        }
        self._message_id = message_id
        self._user_id = user_id
        self._conversation_id = conversation_id
        self._timestamp = timestamp
        self._text = text
        self._voice_url = voice_url
        self._image_url = image_url
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt) -> 'StoredMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StoredMessage of this StoredMessage.  # noqa: E501
        :rtype: StoredMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self) -> str:
        """Gets the message_id of this StoredMessage.

        Unique message identifier  # noqa: E501

        :return: The message_id of this StoredMessage.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: str):
        """Sets the message_id of this StoredMessage.

        Unique message identifier  # noqa: E501

        :param message_id: The message_id of this StoredMessage.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this StoredMessage.

        ID of the user who sent (or received) the message  # noqa: E501

        :return: The user_id of this StoredMessage.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this StoredMessage.

        ID of the user who sent (or received) the message  # noqa: E501

        :param user_id: The user_id of this StoredMessage.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def conversation_id(self) -> str:
        """Gets the conversation_id of this StoredMessage.

        ID of the conversation  # noqa: E501

        :return: The conversation_id of this StoredMessage.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: str):
        """Sets the conversation_id of this StoredMessage.

        ID of the conversation  # noqa: E501

        :param conversation_id: The conversation_id of this StoredMessage.
        :type conversation_id: str
        """
        if conversation_id is None:
            raise ValueError("Invalid value for `conversation_id`, must not be `None`")  # noqa: E501

        self._conversation_id = conversation_id

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this StoredMessage.

        When the message was sent  # noqa: E501

        :return: The timestamp of this StoredMessage.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this StoredMessage.

        When the message was sent  # noqa: E501

        :param timestamp: The timestamp of this StoredMessage.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def text(self) -> str:
        """Gets the text of this StoredMessage.

        Text content, if any  # noqa: E501

        :return: The text of this StoredMessage.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this StoredMessage.

        Text content, if any  # noqa: E501

        :param text: The text of this StoredMessage.
        :type text: str
        """

        self._text = text

    @property
    def voice_url(self) -> str:
        """Gets the voice_url of this StoredMessage.

        Public URL to the stored audio file  # noqa: E501

        :return: The voice_url of this StoredMessage.
        :rtype: str
        """
        return self._voice_url

    @voice_url.setter
    def voice_url(self, voice_url: str):
        """Sets the voice_url of this StoredMessage.

        Public URL to the stored audio file  # noqa: E501

        :param voice_url: The voice_url of this StoredMessage.
        :type voice_url: str
        """

        self._voice_url = voice_url

    @property
    def image_url(self) -> str:
        """Gets the image_url of this StoredMessage.

        Public URL to the stored image file  # noqa: E501

        :return: The image_url of this StoredMessage.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this StoredMessage.

        Public URL to the stored image file  # noqa: E501

        :param image_url: The image_url of this StoredMessage.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def direction(self) -> str:
        """Gets the direction of this StoredMessage.

        Indicates whether the message was sent by the user or generated by the bot  # noqa: E501

        :return: The direction of this StoredMessage.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this StoredMessage.

        Indicates whether the message was sent by the user or generated by the bot  # noqa: E501

        :param direction: The direction of this StoredMessage.
        :type direction: str
        """
        allowed_values = ["user", "bot"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction
